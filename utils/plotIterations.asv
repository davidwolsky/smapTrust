function plotIterations(plotFlag, xi, Delta, OPTopts, caption)
    % TODO_DWW: remove the flag since being called from outside too... or place it last
    if plotFlag
        markerstr = 'xso+*d.^v><ph';
        colourstr = 'kbrgmcy';

        % Manipulate data format and ensure that everything has the same dimensions
        Ni = length(xi);    % Number of iterations
        Nx = length(xi{1}); % Number of variables
        transXi = transpose(cell2mat(xi));
        Ndi = length(Delta);
        Ndx = length(Delta{1});
        if (Ni > Ndi)
            % Handle the case of the no TR is available - returned from tollerance or something 
            Delta{end+1} = zeros(Ndx,1);
        end
        transDelta = transpose(cell2mat(Delta));

        figure()
        % For two dimensional plot the two parameters against each other 
        if ( Nx == 2 )
            axis equal
            for ii = 1:Ni
                plot(xi{ii}(1),xi{ii}(2),strcat(markerstr(1),colourstr(ii)),'LineWidth',2,'MarkerSize',5*ii), grid on, hold on
                % Plot the TR radius by setting up the rectangle
                if (Ndx > 1)
                    transDDelta = [transDelta];
                else
                    transDDelta = [transDelta,transDelta];
                end
                transMerge = [transXi-transDDelta,transDDelta*2];
                % Only plot radius if it is valid
                if (transMerge(ii,3) > 0)
                    rectangle('Position',transMerge(ii,1:4), 'EdgeColor',colourstr(ii),'LineWidth',2)
                end
            end
            axis equal
            xlabel('x1 value')
            ylabel('x2 value')
            title({strcat('Values at each iteration ploted against each other with trust region radius - ', caption)})
        else
            for ii = 1:Nx
                plot(transXi(:,ii), strcat(markerstr(ii),colourstr(ii)),'LineWidth',2,'MarkerSize',10), grid on, hold on
                xOffset = transpose(1:Ni)+(ii*0.07);
                if (Ndx > 1)
                    errorbar(xOffset, transXi(:,ii), transDelta(:,ii), strcat('.',colourstr(ii)),'LineWidth',1.5,'MarkerSize',10 ), grid on, hold on                 
                else
                    errorbar(xOffset, transXi(:,ii), transDelta(:), strcat('.',colourstr(ii)),'LineWidth',1.5,'MarkerSize',10 ), grid on, hold on                    
                end
            end
            xlabel('Iteration')
            ylabel('Value')
            title({strcat('Values per iteration with trust region radius - ', caption)})
        end
        % Plot optimiser min and max
        if ( isfield(OPTopts, 'ximax') )
            for ii = 1:Nx
                plot(OPTopts.ximax(ii)*ones(1,Nx))
                plot(OPTopts.ximin(ii)*ones(1,Nx))
            end
        end
        legend()
    end
end % plotIterations
